/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package arquiproyectoalfa;

import java.awt.AWTException;
import javax.swing.JOptionPane;

/**
 *
 * @author Jason
 */
public class CalculadoraLargeNumbers extends javax.swing.JFrame {

    /**
     * Creates new form CalculadoraLargeNumbers
     */
    private ListaCircularDE lista1;
    private ListaCircularDE lista2;
    private ListaCircularDE listaResultados;
    private boolean auxOperacion = false;
    String contenidoDeArchivo1;
    String contenidoDeArchivo2;

    public CalculadoraLargeNumbers() {
        initComponents();

        setLocationRelativeTo(null);
        lista1 = new ListaCircularDE();
        lista2 = new ListaCircularDE();
        listaResultados = new ListaCircularDE();
        this.setResizable(false);

//        this.jTextAreaPrimerNumero.setLineWrap(true);
//        this.jTextAreaSegundoNumero.setLineWrap(true);
        this.habilitarDeshabilitarOperaciones(false);
        this.jButtonSigNumero.setEnabled(false);
        this.jButtonLimpiar.setEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonMultiplicar = new javax.swing.JButton();
        jButtonDividir = new javax.swing.JButton();
        jButtonSumar = new javax.swing.JButton();
        jButtonRestar = new javax.swing.JButton();
        jButtonComparar = new javax.swing.JButton();
        jButtonArchivoNum1 = new javax.swing.JButton();
        jButtonArchivoNum2 = new javax.swing.JButton();
        jButtonSigNumero = new javax.swing.JButton();
        jButtonLimpiar = new javax.swing.JButton();
        jLabelOperacion = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonMultiplicar.setText("Multiplicar");
        jButtonMultiplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMultiplicarActionPerformed(evt);
            }
        });

        jButtonDividir.setText("Dividir");
        jButtonDividir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDividirActionPerformed(evt);
            }
        });

        jButtonSumar.setText("Sumar");
        jButtonSumar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSumarActionPerformed(evt);
            }
        });

        jButtonRestar.setText("Restar");
        jButtonRestar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRestarActionPerformed(evt);
            }
        });

        jButtonComparar.setText("Comparar");
        jButtonComparar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCompararActionPerformed(evt);
            }
        });

        jButtonArchivoNum1.setText("Ingresar num1 desde un archivo");
        jButtonArchivoNum1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonArchivoNum1ActionPerformed(evt);
            }
        });

        jButtonArchivoNum2.setText("Ingresar num2 desde un archivo");
        jButtonArchivoNum2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonArchivoNum2ActionPerformed(evt);
            }
        });

        jButtonSigNumero.setText("Sig. Número");
        jButtonSigNumero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSigNumeroActionPerformed(evt);
            }
        });

        jButtonLimpiar.setText("Limpiar");
        jButtonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimpiarActionPerformed(evt);
            }
        });

        jLabelOperacion.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabelOperacion.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("Se recuerda al usuario:");

        jLabel2.setText("Ya que se está trabajando con Large numbers, se guardarán los resultados en la siguiente dirección:");

        jLabel4.setText("C:\\Users\\Documents\\NetBeansProjects\\ArquiProyectoAlfa");

        jToggleButton1.setText("Regresar");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(15, 15, 15)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jButtonSumar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButtonRestar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButtonMultiplicar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButtonArchivoNum1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabelOperacion, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButtonArchivoNum2))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jButtonDividir, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButtonComparar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jButtonSigNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonLimpiar, jToggleButton1});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonArchivoNum1)
                    .addComponent(jButtonSigNumero))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelOperacion, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonArchivoNum2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSumar)
                    .addComponent(jButtonRestar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonMultiplicar)
                    .addComponent(jButtonDividir)
                    .addComponent(jButtonComparar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonLimpiar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jToggleButton1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonMultiplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMultiplicarActionPerformed
//        Archivos archivo = new Archivos();
//
//        double cantidadDecimales1 = lista1.encontrarTamañoDecimales();
//        double cantidadDecimales2 = lista2.encontrarTamañoDecimales();
//        lista1.borrarComa(lista1);
//        lista2.borrarComa(lista2);
//        int acarreo = 0;
//        int numero = 0;
//
//        for (int i = (contenidoDeArchivo2.length() - 1); i > 0; i--) {
//            if (Character.toString(contenidoDeArchivo2.charAt(i)) != ",") {
//
//                int multiplicador = Integer.parseInt(Character.toString(contenidoDeArchivo2.charAt(i)));
//
//                for (int j = (contenidoDeArchivo1.length() - 1); j > 0; j--) {
//                    if (Character.toString(contenidoDeArchivo1.charAt(i)) != ",") {
//                        int multiplicando = Integer.parseInt(Character.toString(contenidoDeArchivo1.charAt(j)));
//                        int productoParcial = (multiplicador * multiplicando);
//
//                        if (acarreo != 0) {
//                            productoParcial = productoParcial + acarreo;
//                        }
//
//                        if (productoParcial >= 10) {
//                            acarreo = productoParcial / 10;
//                            numero = productoParcial % 10;
//                        } else {
//                            numero = productoParcial;
//                        }
//
//                        archivo.escribirArchivo("C:\\Users\\Jason\\Documents\\NetBeansProjects\\ArquiProyectoAlfa\\ResultadosDeLasOperaciones\\ResultadoSumayResta.txt", Integer.toString(numero));
//
//                    }
//
//                }
//            }
//
//        }

        Archivos archivo = new Archivos();

        if ((!lista1.estaVacia()) && (!lista2.estaVacia())) {

            if (lista1.verificadorComa(lista1) == false) {
                lista1.ingresarNodoAlFinal(",");
                lista1.ingresarNodoAlFinal("0");
            }
            if (lista2.verificadorComa(lista2) == false) {
                lista2.ingresarNodoAlFinal(",");
                lista2.ingresarNodoAlFinal("0");
            }

            boolean signolista1 = lista1.reconocerSigno(lista1);
            boolean signolista2 = lista2.reconocerSigno(lista2);
            int tamanioParaComa = lista1.encontrarTamañoDecimales() + lista2.encontrarTamañoDecimales();
            int tamanioLista1 = lista1.encontrarTamañoEnteros() + lista1.encontrarTamañoDecimales();

            if ((signolista1 == false) && (signolista2 == true)) {
                lista2.borrarSigno(lista2);
                lista1.borrarComa(lista1);
                lista2.borrarComa(lista2);

                for (int i = 0; i < tamanioLista1; i++) {
                    listaResultados.ingresarNodoAlFinal("0");
                }

                Multiplicacion mult = new Multiplicacion();
                mult.multiplicacion(lista1, lista2, listaResultados);

                listaResultados.ponerComa(listaResultados, tamanioParaComa);
                listaResultados.borrarCerosInnecesarios(listaResultados);
                listaResultados.ingresarNodoAlInicio("-");
                lista1.traspasoMultiplicacion(lista1, listaResultados);

                archivo.escribirArchivo("ResultadoMultiplicacion.txt", lista1.imprimirLista());

            }
            if ((signolista1 == true) && (signolista2 == false)) {
                lista1.borrarSigno(lista1);
                lista1.borrarComa(lista1);
                lista2.borrarComa(lista2);

                for (int i = 0; i < tamanioLista1 - 1; i++) {
                    listaResultados.ingresarNodoAlFinal("0");
                }

                Multiplicacion mult = new Multiplicacion();
                mult.multiplicacion(lista1, lista2, listaResultados);

                listaResultados.ponerComa(listaResultados, tamanioParaComa);
                listaResultados.borrarCerosInnecesarios(listaResultados);
                listaResultados.ingresarNodoAlInicio("-");
                lista1.traspasoMultiplicacion(lista1, listaResultados);

                archivo.escribirArchivo("ResultadoMultiplicacion.txt", lista1.imprimirLista());

            }
            if ((signolista1 == false) && (signolista2 == false)) {

                lista1.borrarComa(lista1);
                lista2.borrarComa(lista2);

                for (int i = 0; i < tamanioLista1; i++) {
                    listaResultados.ingresarNodoAlFinal("0");
                }

                Multiplicacion mult = new Multiplicacion();
                mult.multiplicacion(lista1, lista2, listaResultados);

                listaResultados.ponerComa(listaResultados, tamanioParaComa);
                listaResultados.borrarCerosInnecesarios(listaResultados);
                lista1.traspasoMultiplicacion(lista1, listaResultados);

                archivo.escribirArchivo("ResultadoMultiplicacion.txt", lista1.imprimirLista());

            }

            if ((signolista1 == true) && (signolista2 == true)) {
                lista1.borrarSigno(lista1);
                lista2.borrarSigno(lista2);
                lista1.borrarComa(lista1);
                lista2.borrarComa(lista2);

                for (int i = 0; i < tamanioLista1 - 1; i++) {
                    listaResultados.ingresarNodoAlFinal("0");
                }

                Multiplicacion mult = new Multiplicacion();
                mult.multiplicacion(lista1, lista2, listaResultados);

                listaResultados.ponerComa(listaResultados, tamanioParaComa);
                listaResultados.borrarCerosInnecesarios(listaResultados);
                lista1.traspasoMultiplicacion(lista1, listaResultados);

                archivo.escribirArchivo("ResultadoMultiplicacion.txt", lista1.imprimirLista());
            }

            this.jLabelOperacion.setText("x");
            this.jButtonSigNumero.setEnabled(true);
            this.habilitarDeshabilitarOperaciones(false);

        } else {
            JOptionPane.showMessageDialog(null, "Ingrese los números requeridos.");
        }

    }//GEN-LAST:event_jButtonMultiplicarActionPerformed

    private void jButtonDividirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDividirActionPerformed

        if ((!lista1.estaVacia()) && (!lista2.estaVacia())) {
                if (lista1.verificadorComa(lista1) == false) {
                    lista1.ingresarNodoAlFinal(",");
                    lista1.ingresarNodoAlFinal("0");
                }
                if (lista2.verificadorComa(lista2) == false) {
                    lista2.ingresarNodoAlFinal(",");
                    lista2.ingresarNodoAlFinal("0");
                }

                boolean signo = false;
                boolean signolista1 = lista1.reconocerSigno(lista1);
                boolean signolista2 = lista2.reconocerSigno(lista2);

                if ((signolista1 == false) && (signolista2 == false)) {
                    signo = false;
                }
                if ((signolista1 == true) && (signolista2 == true)) {
                    lista1.borrarSigno(lista1);
                    lista2.borrarSigno(lista2);
                    signo = false;
                }
                if ((signolista1 == true) && (signolista2 == false)) {
                    lista1.borrarSigno(lista1);
                    signo = true;
                }
                if ((signolista1 == false) && (signolista2 == true)) {
                    lista2.borrarSigno(lista2);
                    signo = true;
                }

                if (lista2.verificarDivisionesConCero(lista2) == true) {
                    System.out.println("La división para 0 no está definida.");
                    JOptionPane.showMessageDialog(null, "La división para 0 no está definida.");
                    lista1.vaciarLista(lista1);
                    lista1.ingresarNodoAlFinal("0");
                    lista1.ingresarNodoAlFinal(",");
                    lista1.ingresarNodoAlFinal("0");
                    lista2.vaciarLista(lista2);
                    lista2.ingresarNodoAlFinal("0");
                    lista2.ingresarNodoAlFinal(",");
                    lista2.ingresarNodoAlFinal("0");
                    listaResultados.vaciarLista(listaResultados);
                    listaResultados.ingresarNodoAlFinal("0");
                    listaResultados.ingresarNodoAlFinal(",");
                    listaResultados.ingresarNodoAlFinal("0");
                } else {
                    if (lista1.verificarDivisionesConCero(lista1) == true) {
                        System.out.println("0,0");
                        lista1.vaciarLista(lista1);
                        lista2.vaciarLista(lista2);
                        listaResultados.vaciarLista(listaResultados);
                        lista1.ingresarNodoAlFinal("0");
                        lista1.ingresarNodoAlFinal(",");
                        lista1.ingresarNodoAlFinal("0");
                        lista2.ingresarNodoAlFinal("0");
                        lista2.ingresarNodoAlFinal(",");
                        lista2.ingresarNodoAlFinal("0");
                        listaResultados.ingresarNodoAlFinal("0");
                        listaResultados.ingresarNodoAlFinal(",");
                        listaResultados.ingresarNodoAlFinal("0");
                    } else {
                        lista1.borrarCerosInnecesarios(lista1);
                        lista2.borrarCerosInnecesarios(lista2);

                        int decimalesLista1 = this.lista1.encontrarTamañoDecimales();
                        int decimalesLista2 = this.lista2.encontrarTamañoDecimales();
                        int recorrerComa;

                        if (decimalesLista1 > decimalesLista2) {
                            recorrerComa = (decimalesLista1 - decimalesLista2);
                            this.lista1.borrarComa(lista1);
                            this.lista2.borrarComa(lista2);
                            for (int i = 0; i < recorrerComa; i++) {
                                this.lista2.ingresarNodoAlFinal("0");
                            }
                            lista1.borrarSoloCerosIzquierda(lista1);
                            lista2.borrarSoloCerosIzquierda(lista2);
                        }
                        if (decimalesLista1 < decimalesLista2) {
                            recorrerComa = (decimalesLista2 - decimalesLista1);
                            this.lista1.borrarComa(lista1);
                            this.lista2.borrarComa(lista2);
                            for (int i = 0; i < recorrerComa; i++) {
                                this.lista1.ingresarNodoAlFinal("0");
                            }
                            lista1.borrarSoloCerosIzquierda(lista1);
                            lista2.borrarSoloCerosIzquierda(lista2);
                        }
                        if (decimalesLista1 == decimalesLista2) {
                            this.lista1.borrarComa(lista1);
                            this.lista2.borrarComa(lista2);
                            lista1.borrarSoloCerosIzquierda(lista1);
                            lista2.borrarSoloCerosIzquierda(lista2);
                        }

                        System.out.println("");
                    }

                    DivisionLargeNumbers division = new DivisionLargeNumbers();
                    division.divisionLargeNumbers(lista1, lista2, listaResultados, signo);

                    if (signo == true) {
                        listaResultados.ingresarNodoAlInicio("-");
                    }
                    lista1.traspasoMultiplicacion(lista1, listaResultados);
                }
                this.jLabelOperacion.setText("/");
                this.jButtonSigNumero.setEnabled(true);
                this.habilitarDeshabilitarOperaciones(false);
        } else {
            JOptionPane.showMessageDialog(null, "Ingrese los números requeridos.");
        }

    }//GEN-LAST:event_jButtonDividirActionPerformed

    private void jButtonSumarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSumarActionPerformed

        if ((!lista1.estaVacia()) && (!lista2.estaVacia())) {

            if (lista1.verificadorComa(lista1) == false) {
                lista1.ingresarNodoAlFinal(",");
                lista1.ingresarNodoAlFinal("0");
            }
            if (lista2.verificadorComa(lista2) == false) {
                lista2.ingresarNodoAlFinal(",");
                lista2.ingresarNodoAlFinal("0");
            }

            this.sumar();
            this.jLabelOperacion.setText("+");
            this.jButtonSigNumero.setEnabled(true);
            this.habilitarDeshabilitarOperaciones(false);
        } else {
            JOptionPane.showMessageDialog(null, "Ingrese los números requeridos.");
        }
    }//GEN-LAST:event_jButtonSumarActionPerformed

    private void jButtonRestarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRestarActionPerformed

        if ((!lista1.estaVacia()) && (!lista2.estaVacia())) {
            if (lista1.verificadorComa(lista1) == false) {
                lista1.ingresarNodoAlFinal(",");
                lista1.ingresarNodoAlFinal("0");
            }
            if (lista2.verificadorComa(lista2) == false) {
                lista2.ingresarNodoAlFinal(",");
                lista2.ingresarNodoAlFinal("0");
            }

            boolean signo = lista2.reconocerSigno(lista2);
            if (signo == false) {
                lista2.ingresarNodoAlInicio("-");
            }
            if (signo == true) {
                lista2.borrarSigno(lista2);
            }
            this.sumar();

            this.jLabelOperacion.setText("-");
            this.jButtonSigNumero.setEnabled(true);
            this.habilitarDeshabilitarOperaciones(false);
        } else {
            JOptionPane.showMessageDialog(null, "Ingrese los números requeridos.");
        }
    }//GEN-LAST:event_jButtonRestarActionPerformed

    private void jButtonCompararActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCompararActionPerformed

        if ((!lista1.estaVacia()) && (!lista2.estaVacia())) {
            if (lista1.verificadorComa(lista1) == false) {
                lista1.ingresarNodoAlFinal(",");
                lista1.ingresarNodoAlFinal("0");
            }
            if (lista2.verificadorComa(lista2) == false) {
                lista2.ingresarNodoAlFinal(",");
                lista2.ingresarNodoAlFinal("0");
            }

            if ((lista1.reconocerSigno(lista1) == false) && (lista2.reconocerSigno(lista2) == true)) {
                System.out.println("El primero es mayor.");
                JOptionPane.showMessageDialog(null, "El primero es mayor.");
            }
            if ((lista1.reconocerSigno(lista1) == true) && (lista2.reconocerSigno(lista2) == false)) {
                System.out.println("El segundo es mayor.");
                JOptionPane.showMessageDialog(null, "El segundo es mayor.");
            }
            if ((lista1.reconocerSigno(lista1) == false) && (lista2.reconocerSigno(lista2) == false)) {
                this.igualarListas(lista1, lista2);

                if ((lista1.comparar(lista1, lista2)) == 0) {
                    System.out.println("Ambos números son iguales.");
                    JOptionPane.showMessageDialog(null, "Ambos números son iguales.");
                }
                if ((lista1.comparar(lista1, lista2)) == 1) {
                    System.out.println("El primero es mayor.");
                    JOptionPane.showMessageDialog(null, "El primero es mayor.");
                }
                if ((lista1.comparar(lista1, lista2)) == 2) {
                    System.out.println("El segundo es mayor.");
                    JOptionPane.showMessageDialog(null, "El segundo es mayor.");
                }

            }
            if ((lista1.reconocerSigno(lista1) == true) && (lista2.reconocerSigno(lista2) == true)) {
                lista1.borrarSigno(lista1);
                lista2.borrarSigno(lista2);
                this.igualarListas(lista1, lista2);

                if ((lista1.comparar(lista1, lista2)) == 0) {
                    System.out.println("Ambos números son iguales.");
                    JOptionPane.showMessageDialog(null, "Ambos números son iguales.");
                }
                if ((lista1.comparar(lista1, lista2)) == 2) {
                    System.out.println("El primero es mayor.");
                    JOptionPane.showMessageDialog(null, "El primero es mayor.");
                }
                if ((lista1.comparar(lista1, lista2)) == 1) {
                    System.out.println("El segundo es mayor.");
                    JOptionPane.showMessageDialog(null, "El segundo es mayor.");
                }
            }

            this.jButtonComparar.setEnabled(false);

        } else {
            JOptionPane.showMessageDialog(null, "Ingrese los números requeridos.");
        }
    }//GEN-LAST:event_jButtonCompararActionPerformed

    private void jButtonArchivoNum1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonArchivoNum1ActionPerformed
        lista1.vaciarLista(lista1);

        this.habilitarDeshabilitarOperaciones(true);
        this.jButtonSigNumero.setEnabled(false);

        Archivos archivo = new Archivos();
        contenidoDeArchivo1 = archivo.leerArchivo(JOptionPane.showInputDialog("Ingrese la dirección del archivo que desea leer."));

        for (int i = 0; i < contenidoDeArchivo1.length(); i++) {
            System.out.print(contenidoDeArchivo1.charAt(i));
            lista1.ingresarNodoAlFinal(Character.toString(contenidoDeArchivo1.charAt(i)));
        }

    }//GEN-LAST:event_jButtonArchivoNum1ActionPerformed

    private void jButtonArchivoNum2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonArchivoNum2ActionPerformed
        lista2.vaciarLista(lista2);

        this.habilitarDeshabilitarOperaciones(true);
        this.jButtonSigNumero.setEnabled(false);

        Archivos archivo = new Archivos();
        contenidoDeArchivo2 = archivo.leerArchivo(JOptionPane.showInputDialog("Ingrese la dirección del archivo que desea leer."));

        for (int i = 0; i < contenidoDeArchivo2.length(); i++) {
            System.out.print(contenidoDeArchivo2.charAt(i));
            lista2.ingresarNodoAlFinal(Character.toString(contenidoDeArchivo2.charAt(i)));
        }

    }//GEN-LAST:event_jButtonArchivoNum2ActionPerformed

    private void jButtonSigNumeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSigNumeroActionPerformed

        lista2.vaciarLista(lista2);
        listaResultados.vaciarLista(listaResultados);

        this.jLabelOperacion.setText("");
        auxOperacion = true;
        this.jButtonArchivoNum1.setEnabled(false);
        this.jButtonArchivoNum2.setEnabled(true);
        this.habilitarDeshabilitarOperaciones(true);
        this.jButtonSigNumero.setEnabled(false);

    }//GEN-LAST:event_jButtonSigNumeroActionPerformed

    private void jButtonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimpiarActionPerformed

        if ((!lista1.estaVacia()) && (!lista2.estaVacia())) {
            lista1.vaciarLista(lista1);
            lista2.vaciarLista(lista2);
            listaResultados.vaciarLista(listaResultados);

            this.jLabelOperacion.setText("");

            auxOperacion = false;
            this.jButtonArchivoNum1.setEnabled(true);
            this.jButtonArchivoNum2.setEnabled(true);
            this.habilitarDeshabilitarOperaciones(false);
            this.jButtonSigNumero.setEnabled(false);
            this.jButtonLimpiar.setEnabled(true);

        } else {
            JOptionPane.showMessageDialog(null, "Aún no han sido ingresados ambos números.");
        }

    }//GEN-LAST:event_jButtonLimpiarActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        MenuOpciones menu = new MenuOpciones();
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalculadoraLargeNumbers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalculadoraLargeNumbers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalculadoraLargeNumbers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalculadoraLargeNumbers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalculadoraLargeNumbers().setVisible(true);
            }
        });
    }

    public void habilitarDeshabilitarOperaciones(boolean habilitarDeshabilitar) {
        this.jButtonSumar.setEnabled(habilitarDeshabilitar);
        this.jButtonRestar.setEnabled(habilitarDeshabilitar);
        this.jButtonComparar.setEnabled(habilitarDeshabilitar);
        this.jButtonMultiplicar.setEnabled(habilitarDeshabilitar);
        this.jButtonDividir.setEnabled(habilitarDeshabilitar);
    }

    public void igualarListas(ListaCircularDE lista1, ListaCircularDE lista2) {

        if (lista1.encontrarTamañoEnteros() > lista2.encontrarTamañoEnteros()) {
            int diferencia = lista1.encontrarTamañoEnteros() - lista2.encontrarTamañoEnteros();
            for (int i = 0; i < diferencia; i++) {
                lista2.ingresarNodoAlInicio("0");
            }

        }

        if (lista1.encontrarTamañoEnteros() < lista2.encontrarTamañoEnteros()) {
            int diferencia = lista2.encontrarTamañoEnteros() - lista1.encontrarTamañoEnteros();
            for (int i = 0; i < diferencia; i++) {
                lista1.ingresarNodoAlInicio("0");
            }
        }

        if (lista1.encontrarTamañoDecimales() > lista2.encontrarTamañoDecimales()) {
            int diferencia = lista1.encontrarTamañoDecimales() - lista2.encontrarTamañoDecimales();
            for (int i = 0; i < diferencia; i++) {
                lista2.ingresarNodoAlFinal("0");
            }

        }

        if (lista1.encontrarTamañoDecimales() < lista2.encontrarTamañoDecimales()) {
            int diferencia = lista2.encontrarTamañoDecimales() - lista1.encontrarTamañoDecimales();
            for (int i = 0; i < diferencia; i++) {
                lista1.ingresarNodoAlFinal("0");
            }
        }

    }

    public void sumar() {
        Archivos archivo = new Archivos();

        Suma sum = new Suma();
        boolean signoPrimerNum = lista1.reconocerSigno(lista1);
        boolean signoSegundoNum = lista2.reconocerSigno(lista2);

        if ((signoPrimerNum == false) && (signoSegundoNum == false)) {
            this.igualarListas(lista1, lista2);
            sum.sumaDePositivos(lista1, lista2);
            lista1.borrarCerosInnecesarios(lista1);

            archivo.escribirArchivo("ResultadoSumayResta.txt", lista1.imprimirLista());

        }
        if ((signoPrimerNum == true) && (signoSegundoNum == true)) {
            lista1.borrarSigno(lista1);
            lista2.borrarSigno(lista1);
            this.igualarListas(lista1, lista2);

            sum.sumaDePositivos(lista1, lista2);
            lista1.borrarCerosInnecesarios(lista1);
            lista1.ingresarNodoAlInicio("-");

            archivo.escribirArchivo("ResultadoSumayResta.txt", lista1.imprimirLista());
        }
        if ((signoPrimerNum == false) && (signoSegundoNum == true)) {
            lista2.borrarSigno(lista2);
            this.igualarListas(lista1, lista2);
            int comparacion = lista1.comparar(lista1, lista2);

            if (comparacion == 0) {
                lista1.vaciarLista(lista1);
                lista1.ingresarNodoAlFinal("0");
                lista1.ingresarNodoAlFinal(",");
                lista1.ingresarNodoAlFinal("0");

                archivo.escribirArchivo("ResultadoSumayResta.txt", lista1.imprimirLista());
            }
            if (comparacion == 1) {
                sum.sumaDeSignosDiferentes(lista1, lista2);
                lista1.borrarCerosInnecesarios(lista1);

                archivo.escribirArchivo("ResultadoSumayResta.txt", lista1.imprimirLista());
            }
            if (comparacion == 2) {
                sum.sumaDeSignosDiferentes(lista2, lista1);
                lista1.traspasoDeDatos(lista1, lista2);
                lista1.borrarCerosInnecesarios(lista1);
                lista1.ingresarNodoAlInicio("-");

                archivo.escribirArchivo("ResultadoSumayResta.txt", lista1.imprimirLista());
            }
        }
        if ((signoPrimerNum == true) && (signoSegundoNum == false)) {
            lista1.borrarSigno(lista1);
            this.igualarListas(lista1, lista2);
            int comparacion = lista1.comparar(lista1, lista2);

            if (comparacion == 0) {
                lista1.vaciarLista(lista1);
                lista1.ingresarNodoAlFinal("0");
                lista1.ingresarNodoAlFinal(",");
                lista1.ingresarNodoAlFinal("0");

                archivo.escribirArchivo("ResultadoSumayResta.txt", lista1.imprimirLista());
            }
            if (comparacion == 1) {
                sum.sumaDeSignosDiferentes(lista1, lista2);
                lista1.borrarCerosInnecesarios(lista1);
                lista1.ingresarNodoAlInicio("-");

                archivo.escribirArchivo("ResultadoSumayResta.txt", lista1.imprimirLista());
            }
            if (comparacion == 2) {
                sum.sumaDeSignosDiferentes(lista2, lista1);
                lista1.traspasoDeDatos(lista1, lista2);
                lista1.borrarCerosInnecesarios(lista1);

                archivo.escribirArchivo("ResultadoSumayResta.txt", lista1.imprimirLista());
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonArchivoNum1;
    private javax.swing.JButton jButtonArchivoNum2;
    private javax.swing.JButton jButtonComparar;
    private javax.swing.JButton jButtonDividir;
    private javax.swing.JButton jButtonLimpiar;
    private javax.swing.JButton jButtonMultiplicar;
    private javax.swing.JButton jButtonRestar;
    private javax.swing.JButton jButtonSigNumero;
    private javax.swing.JButton jButtonSumar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelOperacion;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}
